global !v
expand("%:t:r")
endglobal

global !p
def complete(t, opts):
	if t:
		opts= [m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return "(" + '|'.join(opts) + ')'
endglobal

snippet cl "console.log"
console.log(${1:'just a string'})$0
endsnippet

snippet if "if visual support"
if($1) {
	${2:${VISUAL:coding}}
}
endsnippet

snippet describe "function for testing"
describe("$1", function() {
		it("$2", function() {
				$0
		})
});
endsnippet

snippet context "parant.log"
(${VISUAL});
endsnippet

snippet func "function"
function ${1:func_name}($2) {
	${0:${VISUAL}}
}
endsnippet

snippet it "it testing"
it("$1", function() {
	$0
});
endsnippet

snippet afunc "function"
($1) => {
	${2:${VISUAL:body}}
}
endsnippet

snippet setTimeout "setTimeout"
setTimeout(function() {
	${1:${VISUAL}}
}, ${0:1000})
endsnippet

snippet simp "Simple" !b
`!p snip.rv =`
endsnippet

# expand when there is exactly one space infront
snippet '^ st' "Status" r
status $1`!p snip.rv=complete(t[1], ['new', 'incomplete', 'invalid'])`
endsnippet

snippet eslint "Eslint boilerplate"
//npm install babel-eslint 
// .elintrc.js
module.exports = {
    env: {
        node: true,
        browser: true,
        jquery: true,
        es6: true,
    },
    parser: "babel-eslint",
    extends: "eslint:recommended",
    parserOptions: {
        ecmaVersion: 2016,
        sourceType: "module",
    },
    rules: {
        // enable additional rules
        indent: ["error", 4],
        "linebreak-style": ["error", "unix"],
        quotes: ["error", "double"],
        semi: ["error", "always"],
        // override default options for rules from base configurations
        "comma-dangle": [2, "always-multiline"],
        "no-cond-assign": ["error", "always"],

        // disable rules from base configurations
        "no-console": "off",
    },
};
endsnippet

snippet nimp "Named import"
import $1 from "$2";$0
endsnippet

snippet fcomp "Functional Component"
import React from "react";
import PropTypes from "prop-types";

const ${1:`!v expand("%:t:r")`} = (${2:props}) => (

    ${3:<jsx />}
);

$1.propTypes = {
		$4
};

export default $1;

endsnippet

snippet ptn "PropTypes number required"
PropTypes.number.isRequired,
endsnippet

snippet pts "PropTypes string required"
PropTypes.string.isRequired,
endsnippet

snippet ptdefi "PropTypes definition"
$1.propTypes = {
	$2
};
endsnippet

snippet ptdefa "PropTypes default" b
$1.defaultProps = {
	$2
};
endsnippet

snippet ipt "Import Propt types"
import PropTypes from "prop-types";$0
endsnippet


snippet div "Simple jsx div" b
<div>${1:${VISUAL:coding}}</div>
endsnippet

# TESTING

snippet shallow "Shallow render" b
const wrapper = shallow(<$1 />)
endsnippet

# vim:ft=snippets:
