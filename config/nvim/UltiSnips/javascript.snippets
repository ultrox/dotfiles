global !p
def complete(t, opts):
	if t:
		opts= [m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return "(" + '|'.join(opts) + ')'
endglobal

snippet cl "console.log"
console.log(${1:'just a string'})$0
endsnippet

snippet context "parant.log"
(${VISUAL});
endsnippet

snippet func "function"
function ${1:func_name}($2) {
	${3:${VISUAL}}
}$0
endsnippet


snippet afunc "function"
($1) => {
	${2:${VISUAL}}
}
endsnippet

snippet setTimeout "setTimeout"
setTimeout(function() {
	${1:${VISUAL}}
}, ${0:1000})
endsnippet

snippet simp "Simple" !b
`!p snip.rv =
endsnippet

# expand when there is exactly one space infront
snippet '^ st' "Status" r
status $1`!p snip.rv=complete(t[1], ['new', 'incomplete', 'invalid'])`
endsnippet

snippet eslint "Eslint boilerplate"
//npm install babel-eslint 
// .elintrc.js
module.exports = {
    env: {
        node: true,
        browser: true,
        jquery: true,
        es6: true,
    },
    parser: "babel-eslint",
    extends: "eslint:recommended",
    parserOptions: {
        ecmaVersion: 2016,
        sourceType: "module",
    },
    rules: {
        // enable additional rules
        indent: ["error", 4],
        "linebreak-style": ["error", "unix"],
        quotes: ["error", "double"],
        semi: ["error", "always"],
        // override default options for rules from base configurations
        "comma-dangle": [2, "always-multiline"],
        "no-cond-assign": ["error", "always"],

        // disable rules from base configurations
        "no-console": "off",
    },
};
endsnippet
