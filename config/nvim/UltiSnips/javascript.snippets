global !p
from snippet_helpers_js import *
endglobal

snippet rrd "React router dom" b
import { $1 } from "react-router-dom";
endsnippet

snippet cl "console.log"
console.log(${1:'just a string'})$0
endsnippet

snippet if "if visual support"
if($1) {
	${2:${VISUAL:coding}}
}
endsnippet


snippet eig "Disable next line" b
// eslint-disable-next-line
endsnippet

snippet pig "Prettier Ignore" b
// prettier-ignore
endsnippet

snippet pigs "Prettier Ignore Start Range" b
// prettier-ignore-start
endsnippet

snippet pige "Prettier Ignore End Range" b
// prettier-ignore-end
endsnippet

snippet why "What is this for" b
/** ${1:${VISUAL}} */
endsnippet

snippet describe "function for testing"
describe("$1", function() {
		it("$2", function() {
				$0
		})
});
endsnippet

snippet context "parant.log"
(${VISUAL});
endsnippet

snippet func "function"
function ${1:func_name}($2) {
	${0:${VISUAL}}
}
endsnippet

snippet test "Test case testing"
test("$1", ($2) => {
	$0
});
endsnippet

snippet it "it testing"
it("$1", function() {
	$0
});
endsnippet

snippet afunc "function"
($1) => {
	${2:${VISUAL:body}}
}
endsnippet

snippet setTimeout "setTimeout"
setTimeout(function() {
	${1:${VISUAL}}
}, ${0:1000})
endsnippet

# expand when there is exactly one space infront
snippet '^ st' "Status" r
status $1`!p snip.rv=complete(t[1], ['new', 'incomplete', 'invalid'])`
endsnippet

snippet eslint "Eslint boilerplate"
//npm install babel-eslint 
// .elintrc.js
module.exports = {
    env: {
        node: true,
        browser: true,
        jquery: true,
        es6: true,
    },
    parser: "babel-eslint",
    extends: "eslint:recommended",
    parserOptions: {
        ecmaVersion: 2016,
        sourceType: "module",
    },
    rules: {
        // enable additional rules
        indent: ["error", 4],
        "linebreak-style": ["error", "unix"],
        quotes: ["error", "double"],
        semi: ["error", "always"],
        // override default options for rules from base configurations
        "comma-dangle": [2, "always-multiline"],
        "no-cond-assign": ["error", "always"],

        // disable rules from base configurations
        "no-console": "off",
    },
};
endsnippet

snippet nimp "Named import"
import $1 from "$2";$0
endsnippet

snippet rimp "Import React"
import React from "react";
endsnippet

snippet fcomp "Functional Component"
const ${1:`!v expand("%:t:r")`} = ${2:props} => { 
	return ${3:<div />}
};

$1.propTypes = { $4 };

export default $1;

endsnippet

snippet ":ptoo" "PropTypes Onof" r
: PropTypes.oneOf(["${1:string}", "${2:number}"]),
endsnippet

snippet ":pta" "Array propTypes" r
: PropTypes.array.isRequired,
endsnippet

snippet ":ptos" "Object Shapre propTypes" r
: PropTypes.shape({
    $1
  }),
endsnippet

snippet ":ptn" "PropTypes number required" r
: PropTypes.number.isRequired,
endsnippet

snippet ':ptf' "PropTypes function required" r
: PropTypes.func.isRequired,
endsnippet

snippet ":pts" "PropTypes string required" r
: PropTypes.string.isRequired,
endsnippet

snippet ":ptb" "PropTypes boolean required" r
: PropTypes.bool.isRequired,
endsnippet

snippet ":pto" "PropTypes object required" r
: PropTypes.object.isRequired,
endsnippet

snippet ptdefi "PropTypes definition"
`!p js_comp_name(path, snip)`.propTypes = {
	$2
};
endsnippet

snippet ptdefault "Default PropTypes" b
${1:`!v expand("%:t:r")`}.defaultProps = {
	$2
};
endsnippet

snippet oncl "onClick function" w
onClick={$1}
endsnippet

snippet onch "onChange function" w
onChange={$1}
endsnippet

snippet onsu "onSubmit function" w
onSubmit={$1}
endsnippet

snippet ipt "Import Propt types"
import PropTypes from "prop-types";$0
endsnippet


snippet div "Simple jsx div" b
<div>
	${1:${VISUAL:coding}}
</div>
endsnippet

# TESTING

snippet shallow "Shallow render" b
const wrapper = shallow(<$1 />)
endsnippet

snippet rtes "Testing setup" b
import React from 'react';
import {shallow} from 'enzyme';
import {createSerializer} from 'enzyme-to-json';

import $1 from './$1';

describe('$1', () => {
	it('$2', () => {
        const wrapper = shallow(<$1 $3/>);
			  $0
	});
});
endsnippet

snippet sfunc "Suround function call" w
${1:func}(${VISUAL})
endsnippet


snippet ccomp "Class Component" b
import React from "react";
import PropTypes from "prop-types";

class ${1:`!v expand("%:t:r")`} extends React.Component {
  constructor(props, context) {
    super(props, context);

    this.state = {$2};
  }

  render () {
    return ${3:<JSX />}${VISUAL}
  }
}

$1.propTypes = {
		$4
};

export default $1;
endsnippet


snippet tccomp "Tranform to Class Comp" b

class ${1:`!v expand("%:t:r")`} extends React.Component {
	constructor(props, context) {
		super(props, context);

		this.state = {$2};
	}

	render () {
		return ${3:<JSX />}${VISUAL}
	}
}
endsnippet


snippet toHaveLength "Enzyme element have leng" b
expect(wrapper.find({type: "$1"})).toHaveLength($2);
endsnippet


snippet toMatchSnapshot "Matching Snapshoot" b
expect(${1:wrapper}).toMatchSnapshot();
endsnippet


snippet reduce "expect <func>, [seed]" w
reduce(($1) => $2, ${3:seed})
endsnippet

snippet alfa "Doing alfa stuff" b
import React from "react";
import PropTypes from "prop-types";

const `!p js_comp_name(path, snip)` = ({ ${1:props:func} }) => (
	${2:<jsx/>}
);
$0
`!p js_comp_name(path, snip)`.propTypes = {
`!p propTypes(t[1], snip)`
}

export default `!p js_comp_name(path, snip)`
endsnippet

snippet ss "SetState" b
this.setState({ $1 })
endsnippet

snippet fetch "Fetch function" b
fetch( ${1:'http://swapi.co/api/people/?format=json'} )
	.then( respose => respose.json() )
	.then( ( {results: items} ) => this.setState({items}) )
endsnippet

snippet input:radio "Radio button" b
<input type="radio" name="" id="" />
endsnippet

snippet hasOwn "if hasOwnProperty" b
if (${1:object}.hasOwnProperty("$2")) {
	$0
}
endsnippet

snippet rfrag "React Fragment" b
<React.Fragment>
	${1:${VISUAL}}
</React.Fragment>
endsnippet

snippet "JSON.s" "JSON stringify" r
JSON.stringify($1)
endsnippet

snippet "JSON.p" "JSON parse" r
JSON.parse($1)
endsnippet

snippet obj "Snippet description" b
{
	id: "$1",
	niceName: "$2",
	fieldName: "`!p snip.rv=t[2].replace(" ", "").lower()`",
},
endsnippet


snippet isdev " description" b
if (process.env.NODE_ENV === "development")
endsnippet

snippet cas "Casual"
() => casual.$0,
endsnippet

# vim:ft=snippets:


